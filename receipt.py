from fastapi import FastAPI
import psycopg2
import time
import requests
import json

app = FastAPI()

# === CONFIG ===
API_KEY = 'AIzaSyBtiZ-IL5ojnlziFv6QdtPMApSR6KRDcPE'
GEMINI_API_URL = f'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={API_KEY}'

DB_CONFIG = {
    "host": "localhost",
    "database": "n8n",
    "user": "admin",
    "password": "P@ssw0rd",
    "port": 5433
}

# === GEMINI API ===
def call_gemini_api(prompt: str) -> str:
    headers = {"Content-Type": "application/json"}
    body = {
        "contents": [{
            "role": "user",
            "parts": [{"text": prompt}]
        }]
    }

    response = requests.post(GEMINI_API_URL, headers=headers, data=json.dumps(body))
    if response.status_code == 200:
        data = response.json()
        return data['candidates'][0]['content']['parts'][0]['text'].strip('"\' \n\r\t')
    else:
        print("‚ùå API Error:", response.status_code, response.text)
        return "ERROR"

# === FASTAPI ENDPOINT ===
@app.post("/process")
def process_receipts():
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à...")

    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()

        print("üåÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")
        cur.execute("SELECT id, ocr_text FROM uploaded_files_page WHERE extract_receipt IS NULL LIMIT 100")
        rows = cur.fetchall()
        print(f"üì¶ ‡∏û‡∏ö {len(rows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

        results = []

        for row in rows:
            receipt_id, ocr_text = row
            if not ocr_text or len(ocr_text.strip()) < 10:
                print(f"‚ö†Ô∏è OCR ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (ID={receipt_id})")
                continue

            prompt = f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ
‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£, ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á, ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ, ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô, ‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤, ‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏Ø‡∏•‡∏Ø
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR:
\"\"\"{ocr_text}\"\"\""""

            try:
                print(f"üîç ‡∏™‡πà‡∏á Gemini ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ID={receipt_id}")
                start_time = time.time()
                receipt_type = call_gemini_api(prompt)
                time_used = time.time() - start_time

                cur.execute("""
                    UPDATE uploaded_files_page
                    SET extract_receipt = %s,
                        extract_receipt_timeprocess = %s
                    WHERE id = %s
                    RETURNING id, extract_receipt
                """, (receipt_type, time_used, receipt_id))

                result = cur.fetchone()
                if result:
                    print(f"‚úÖ DB Updated: ID={result[0]}, type={result[1]}")
                    results.append({"id": result[0], "type": result[1]})
                else:
                    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡πÉ‡∏ô DB: {receipt_id}")

            except Exception as inner_e:
                print(f"‚ùå ERROR ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ID={receipt_id}: {inner_e}")

        conn.commit()
        cur.close()
        conn.close()
        print("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

        return {"processed": len(results), "details": results}

    except Exception as e:
        print(f"‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return {"error": str(e)}